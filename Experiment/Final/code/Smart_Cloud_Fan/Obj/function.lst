C51 COMPILER V9.02   FUNCTION                                                              12/19/2022 09:56:58 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE FUNCTION
OBJECT MODULE PLACED IN ..\Obj\function.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ..\Public\function.c BROWSE INCDIR(..\Api;..\Public;..\User) DEBUG OBJECTEX
                    -TEND PRINT(..\Obj\function.lst) OBJECT(..\Obj\function.obj)

line level    source

   1          #include "function.h"
   2          
   3          /*******************************
   4          initialize and return the wifi state
   5          *******************************/
   6          unsigned char Init()
   7          {
   8   1              unsigned char ret;
   9   1      
  10   1              timer0_config();                          
  11   1              pwm_init(100, 100);  // 初始占空比占满，使得led不亮，方便判断wifi返回值
  12   1              ds18b20_init();
  13   1              ired_init();
  14   1              ret = Wifi_Init();
  15   1              if (ret==0)      // 正常，获取当前时间
  16   1              {
  17   2                      delay_ms(250);
  18   2                      wifi_SendString("get time");
  19   2                      while (WIFI_RX_STA == 0)  // 等待接收完成标志
  20   2                      WIFI_RX_STA = 0;  // 清标志
  21   2                      Wifi_GetTime();
  22   2              }
  23   1              return ret;
  24   1      }
  25          
  26          /*******************************
  27          update current time
  28          if wifi is connectted, it might be useless 
  29          *******************************/
  30          bit flag_cur_time_1s=0;
  31          void cur_time_update()
  32          {
  33   1              if (flag_cur_time_1s==1)
  34   1              {
  35   2                      flag_cur_time_1s = 0;
  36   2                      cur_time_sec++;
  37   2                      if (cur_time_sec==60)
  38   2                      {
  39   3                              cur_time_sec = 0;
  40   3                              cur_time_min++;
  41   3                              if (cur_time_min==60)
  42   3                              {
  43   4                                      cur_time_min = 0;
  44   4                                      cur_time_hour++;
  45   4                                      if (cur_time_hour==24) cur_time_hour = 0;       
  46   4                              }
  47   3                      }
  48   2              }       
  49   1      }
  50          
  51          /*******************************
  52          count for timer
  53          *******************************/
  54          bit flag_timer_1s=0;
C51 COMPILER V9.02   FUNCTION                                                              12/19/2022 09:56:58 PAGE 2   

  55          void timer_count()
  56          {
  57   1              if (timer_mode == 3)  // 定时功能开
  58   1              {
  59   2                      if (flag_timer_1s==1)
  60   2                      {
  61   3                              flag_timer_1s = 0;
  62   3                              if (timer_sec==0)
  63   3                              {
  64   4                                      if (timer_min==0)        // 时间到，关机
  65   4                                      {
  66   5                                              fan_mode = 0;  // 关机
  67   5                                              pwm_duty(0);
  68   5                                              rotate_speed = 0;  // 不摇头
  69   5                                              fan_speed = 1;  // 速度为1档
  70   5                                              timer_mode = 0;  // 定时关闭功能关
  71   5                                              timer_min = 0;
  72   5                                              timer_sec = 0;  // 定时清空
  73   5                                              dis_temp_state = 0; // 初始显示温度
  74   5                                      }else
  75   4                                      {
  76   5                                              timer_min--;
  77   5                                              timer_sec = 59;
  78   5                                      }
  79   4                              }else timer_sec--;
  80   3                      }       
  81   2              }       
  82   1      }
  83          
  84          /*******************************
  85          sacn the keys and update the global variable
  86          *******************************/
  87          void key_state_update()
  88          {
  89   1              unsigned char key;
  90   1              
  91   1              key = matrix_key_scan();
  92   1      
  93   1              if (key==1)      // 模式：关、标准、睡眠风、温控
  94   1              {
  95   2                      fan_mode = (fan_mode+1)%4;      
  96   2                      if (fan_mode==0)  // 关机时复位
  97   2                      {
  98   3                              rotate_speed = 0;  // 不摇头
  99   3                              fan_speed = 1;  // 速度为1档
 100   3                              timer_mode = 0;  // 定时关闭功能关
 101   3                              timer_min = 0;
 102   3                              timer_sec = 0;  // 定时清空
 103   3                      } else if (fan_mode==3)  // 温控开始时记录当时温度和占空比
 104   2                      {
 105   3                              start_temp = temp;
 106   3                              start_duty = g_pwm_duty;        
 107   3                      }       
 108   2              } else if (key==2 && fan_mode!=0)       // 左右摇头
 109   1                      rotate_speed = (rotate_speed+1)%3;      
 110   1              else if (key==3 && fan_mode==1)  // 风速
 111   1                      fan_speed = (fan_speed%3)+1;    
 112   1              else if (key==4 && fan_mode!=0)  // 定时器倒计时关机
 113   1              {
 114   2                      timer_mode = (timer_mode+1)%4;
 115   2                      if (timer_mode==0)      // 关闭定时
 116   2                      {
C51 COMPILER V9.02   FUNCTION                                                              12/19/2022 09:56:58 PAGE 3   

 117   3                              timer_min = 0;
 118   3                              timer_sec = 0;  // 定时清空     
 119   3                      }
 120   2              }       
 121   1              else if (key==5 && fan_mode!=0)  // 定时器设置时间，单击
 122   1              {
 123   2                      if (timer_mode==1)
 124   2                              timer_sec = (timer_sec+1)%60;
 125   2                      else if (timer_mode==2)
 126   2                              timer_min = (timer_min+1)%100;  
 127   2              } else if (key==21 && fan_mode!=0)  // 定时器设置时间，长按
 128   1              {
 129   2                      if (timer_mode==1)
 130   2                              timer_sec = (timer_sec+5)%60;
 131   2                      else if (timer_mode==2)
 132   2                              timer_min = (timer_min+1)%100;  
 133   2              } else if (key==6)      // 切换显示温度或风扇状态
 134   1                      dis_temp_state = ~dis_temp_state;
 135   1      }
 136          
 137          /*******************************
 138          take action according to the global variable
 139          *******************************/
 140          void aciton()
 141          {
 142   1              cur_time_update();
 143   1              timer_count();
 144   1              // pwm
 145   1              if (fan_mode==0)  // 关机
 146   1                      pwm_duty(0);
 147   1              else if (fan_mode==1)  // 标准模式
 148   1                      pwm_duty(fan_speed*40-30);  // 1, 5, 9
 149   1              else if (fan_mode==2)  // 睡眠风
 150   1                      pwm_sleep_wind();
 151   1              else if (fan_mode==3)  // 温控模式
 152   1                      pwm_temp_ctrl();
 153   1      
 154   1              step_motor_round();  // 摇头
 155   1      }
 156          
 157          /*******************************
 158          display on the nixie tube 
 159          *******************************/
 160          unsigned char code led_num[16] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x77, 0x7c, 
             -0x39, 0x5e, 0x79, 0x71};
 161          void nixie()
 162          {
 163   1              unsigned char ch[8];
 164   1      
 165   1              ch[4] = 0x00;
 166   1              if (timer_mode == 0)  // 显示时间
 167   1              {
 168   2                      ch[0] = led_num[cur_time_hour/10];      
 169   2                      ch[1] = led_num[cur_time_hour%10];
 170   2                      ch[2] = led_num[cur_time_min/10];
 171   2                      ch[3] = led_num[cur_time_min%10];
 172   2              } else  // 显示定时
 173   1              {
 174   2                      ch[0] = led_num[timer_min/10];  
 175   2                      ch[1] = led_num[timer_min%10];
 176   2                      ch[2] = led_num[timer_sec/10];
 177   2                      ch[3] = led_num[timer_sec%10];
C51 COMPILER V9.02   FUNCTION                                                              12/19/2022 09:56:58 PAGE 4   

 178   2              }
 179   1      
 180   1              if (dis_temp_state == 0)  // 显示温度
 181   1              {
 182   2                      ch[5] = led_num[temp%1000/100];
 183   2                      ch[6] = led_num[temp%1000%100/10];
 184   2                      ch[6] |= 0x80;  // 小数点
 185   2                      ch[7] = led_num[temp%1000%100%10];
 186   2              } else  // 显示状态
 187   1              {
 188   2                      ch[5] = led_num[fan_mode];
 189   2                      ch[6] = led_num[rotate_speed];
 190   2                      ch[7] = led_num[fan_speed];
 191   2              }
 192   1              digital_display(ch);
 193   1      }
 194          
 195          /*******************************
 196          update the temperature
 197          *******************************/
 198          void temp_update()
 199          {
 200   1              if (flag_temp_update_1s == 1)
 201   1              {
 202   2                      flag_temp_update_1s = 0;
 203   2                      temp = ds18b20_read_temperture();
 204   2              }
 205   1      }
 206          
 207          /*******************************
 208          make the wifi send string and store in the send buffer
 209          *******************************/
 210          xdata unsigned char wifi_send_buf[23];
 211          void make_str()
 212          {
 213   1              sprintf(wifi_send_buf, "%c,%c,%c,%c,%c,%c,%c,%c",\                                                      
 214   1                      fan_mode+'0', rotate_speed+'0', fan_speed+'0',\
 215   1                      timer_mode+'0', timer_min/10+'0', timer_min%10+'0',\
 216   1                      timer_sec/10+'0', timer_sec%10+'0');
 217   1      }
 218          
 219          /*******************************
 220          update and synchronize the wifi data
 221          *******************************/
 222          void wifi_update()
 223          {
 224   1              if (flag_wifi_update_2s == 1)
 225   1              {
 226   2                      flag_wifi_update_2s = 0;
 227   2                      make_str();  // 合成本地数据的字符串
 228   2                      wifi_SendString(wifi_send_buf);  // 发送本地数据给wifi
 229   2                      Wifi_Analysis_Response();  // wifi响应并改变全局变量  
 230   2              }
 231   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    735    ----
   CONSTANT SIZE    =     49    ----
   XDATA SIZE       =     23    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       9
C51 COMPILER V9.02   FUNCTION                                                              12/19/2022 09:56:58 PAGE 5   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
