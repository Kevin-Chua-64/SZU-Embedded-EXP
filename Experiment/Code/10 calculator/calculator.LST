C51 COMPILER V9.02   CALCULATOR                                                            11/10/2022 23:39:25 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE CALCULATOR
OBJECT MODULE PLACED IN calculator.OBJ
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE calculator.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // 0  1  2  3
   2          // 4  5  6  7
   3          // 8  9  +  -
   4          // *  /  =      AC
   5          // LED D1,D2,D3,D4分别表示加减乘除
   6          
   7          #include <reg51.h>
   8          unsigned char code led_num[12] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f, 0x40, 0x00};
             -  //12个模值，0~9，-，不显示
   9          
  10          sbit LSA=P2^2;
  11          sbit LSB=P2^3;
  12          sbit LSC=P2^4;
  13          
  14          sbit k1 = P1^3;
  15          sbit k2 = P1^2;
  16          sbit k3 = P1^1;
  17          sbit k4 = P1^0;
  18          
  19          sbit led1 = P2^0;
  20          sbit led2 = P2^1;
  21          sbit led3 = P2^6;
  22          sbit led4 = P2^7;
  23          
  24          bit flag = 0;
  25          
  26          long cur_value=0, value=0;  // 两个运算的数
  27          
  28          unsigned char current_display[8] = {11,11,11,11,11,11,11,0};  // 当前显示的内容，十进制，11表示不显示
  29          
  30          void delay(unsigned char z)      // delay z ms
  31          {
  32   1              unsigned char i, j;
  33   1              for(j=0;j<z;j++)
  34   1                      for(i=0;i<127;i++);
  35   1      }
  36          
  37          void timer0_config()  //11.0592MHz
  38          {
  39   1              TMOD &= 0xf0;
  40   1              TMOD |= 0x01;  // 计数器0工作在模式1
  41   1              TR0 = 1;  // 计数器0工作
  42   1              TH0 = 0xf8;   
  43   1              TL0 = 0xcd;  // 65536-63693=1843, 2ms
  44   1              EA = 1;
  45   1              ET0 = 1;  // 打开中断
  46   1      }
  47          
  48          unsigned char key_scan()
  49          {
  50   1              static unsigned char j=0;
  51   1              static unsigned char key_flag[4]={0x00,0x00,0x00,0x00};  // 四行，倒数第几位为0表示第几列按键没按下
  52   1              static unsigned char buff[4][4]={{0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff},{0xff,
             -0xff,0xff,0xff}};  // 消抖，连续采样8次，8次采样值均相同才视为稳定
  53   1              unsigned char i;
C51 COMPILER V9.02   CALCULATOR                                                            11/10/2022 23:39:25 PAGE 2   

  54   1      
  55   1              switch(j)  // 换行扫描，对应行输入置0，低电平
  56   1              {
  57   2                      case 0: P1 = 0x7f; break;
  58   2                      case 1: P1 = 0xbf; break;
  59   2                      case 2: P1 = 0xdf; break;
  60   2                      case 3: P1 = 0xef; break;
  61   2              }
  62   1      
  63   1              if (flag == 1)  // 每2ms检测一次
  64   1              {
  65   2                      flag = 0;
  66   2                      buff[j][0] = (buff[j][0]<<1) | k1;
  67   2                      buff[j][1] = (buff[j][1]<<1) | k2;
  68   2                      buff[j][2] = (buff[j][2]<<1) | k3;
  69   2                      buff[j][3] = (buff[j][3]<<1) | k4;              
  70   2      
  71   2                      for (i=0;i<4;i++)  //循环检测四个按键
  72   2                      {
  73   3                              if ( ((key_flag[j]>>i)&0x01)==0x00 && buff[j][i]==0x00 )
  74   3                              {
  75   4                                      key_flag[j] |= 0x01<<i;  // 置1，表示按键按下
  76   4                                      return (4*j+i);
  77   4                              }
  78   3                              else if (buff[j][i]==0xff) key_flag[j] &= ~(0x01<<i);  // 置0，表示按键松开
  79   3                      }
  80   2              }
  81   1      
  82   1              j++;
  83   1              if (j==4) j = 0;
  84   1      
  85   1              return 0xff;  // 表示按键松开或者处于不稳定状态
  86   1      } 
  87          
  88          void display_update(long v)
  89          {
  90   1              long tmp;
  91   1              unsigned char i=0;
  92   1              unsigned char j, k;
  93   1      
  94   1              if (v==0)  // 0的显示
  95   1              {
  96   2                      tmp = 0;
  97   2                      current_display[7] = 0;
  98   2                      i++;
  99   2              }
 100   1              else if (v < 0) tmp = -v;
 101   1              else tmp = v;
 102   1              while (tmp != 0)
 103   1              {
 104   2                      if (i>7)
 105   2                      {
 106   3                              for (k=0;k<8;k++)
 107   3                                      current_display[k] = 10;  // 溢出，显示全为-
 108   3                              return;
 109   3                      }
 110   2                      current_display[7-i] = tmp%10;  // 逐步取出最低位
 111   2                      tmp = tmp/10;
 112   2                      i++;
 113   2              }
 114   1              if (v<0)
 115   1              {
C51 COMPILER V9.02   CALCULATOR                                                            11/10/2022 23:39:25 PAGE 3   

 116   2                      if (i>7)
 117   2                      {
 118   3                              for (k=0;k<8;k++)
 119   3                                      current_display[k] = 10;  // 溢出，显示全为-
 120   3                              return;
 121   3                      }
 122   2                      current_display[7-i] = 10;  // 负号
 123   2                      i++;
 124   2              }
 125   1              for (j=0;j<(8-i);j++)  // 消除不需要用到的高位
 126   1                      current_display[j] = 11;
 127   1      }
 128          
 129          void key_action(unsigned char key)
 130          {
 131   1              static char op;
 132   1      
 133   1              if (key>=0 && key<=9)  // 输入0~9
 134   1              {
 135   2                      cur_value = cur_value*10 + key;
 136   2                      display_update(cur_value);
 137   2              }
 138   1              else if (key>=10 && key<=13)  // 加减乘除
 139   1              {
 140   2                      value = cur_value;
 141   2                      cur_value = 0;
 142   2                      switch (key)
 143   2                      {
 144   3                              case 10: op = '+'; led1=0; led2=1; led3=1; led4=1; break;
 145   3                              case 11: op = '-'; led1=1; led2=0; led3=1; led4=1; break;
 146   3                              case 12: op = '*'; led1=1; led2=1; led3=0; led4=1; break;
 147   3                              case 13: op = '/'; led1=1; led2=1; led3=1; led4=0; break;
 148   3                      }
 149   2              }
 150   1              else if (key == 14)  // 计算
 151   1              {
 152   2                      switch (op)
 153   2                      {
 154   3                              case '+': cur_value = value + cur_value; led1=1; led2=1; led3=1; led4=1; break;
 155   3                              case '-': cur_value = value - cur_value; led1=1; led2=1; led3=1; led4=1; break;
 156   3                              case '*': cur_value = value * cur_value; led1=1; led2=1; led3=1; led4=1; break;
 157   3                              case '/': cur_value = value / cur_value; led1=1; led2=1; led3=1; led4=1; break;
 158   3                              default: break;
 159   3                      }
 160   2                      display_update(cur_value);
 161   2              }
 162   1              else if (key == 15)  // 清零
 163   1              {
 164   2                      cur_value = 0;
 165   2                      value = 0;
 166   2                      led1=1; led2=1; led3=1; led4=1;
 167   2                      display_update(cur_value);
 168   2              }                                               
 169   1              // key==0xff，无按键按下或者按键尚未平稳，无操作
 170   1      }
 171                                                           
 172          void display()
 173          {
 174   1              static unsigned char i=0;
 175   1      
 176   1              switch(i)  // 位选和段选
 177   1              {
C51 COMPILER V9.02   CALCULATOR                                                            11/10/2022 23:39:25 PAGE 4   

 178   2                      case 0: LSC=1;LSB=1;LSA=1;P0 = led_num[current_display[0]]; break;
 179   2                      case 1: LSC=1;LSB=1;LSA=0;P0 = led_num[current_display[1]]; break;
 180   2                      case 2: LSC=1;LSB=0;LSA=1;P0 = led_num[current_display[2]]; break;
 181   2                      case 3: LSC=1;LSB=0;LSA=0;P0 = led_num[current_display[3]]; break;
 182   2                      case 4: LSC=0;LSB=1;LSA=1;P0 = led_num[current_display[4]]; break;
 183   2                      case 5: LSC=0;LSB=1;LSA=0;P0 = led_num[current_display[5]]; break;
 184   2                      case 6: LSC=0;LSB=0;LSA=1;P0 = led_num[current_display[6]]; break;
 185   2                      case 7: LSC=0;LSB=0;LSA=0;P0 = led_num[current_display[7]]; break;
 186   2              }
 187   1      
 188   1              delay(2);
 189   1              P0=0x00;  // 消音
 190   1              i++;
 191   1              if (i==8) i = 0;
 192   1      }
 193          
 194          void main()
 195          {
 196   1              unsigned char key=0;
 197   1              
 198   1              timer0_config();
 199   1              while(1)
 200   1              {
 201   2                      key = key_scan();
 202   2                      key_action(key);
 203   2                      display();
 204   2              }
 205   1      }
 206          
 207          void timer0_2ms() interrupt 1
 208          {
 209   1              TH0 = 0xf8;   
 210   1              TL0 = 0xcd;  // 65536-63693=1843, 2ms
 211   1              flag = 1;
 212   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1084    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     39      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
